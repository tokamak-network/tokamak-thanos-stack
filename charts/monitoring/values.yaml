# Global settings (trh-sdk에서 동적으로 override할 설정값들)
global:
  # L1 RPC 설정 (trh-sdk에서 입력받을 값)
  l1RpcUrl: "https://your-l1-rpc-endpoint"
  
  # 대시보드 자동 임포트 설정
  dashboards:
    autoImport: true

# Prometheus 설정
prometheus:
  enabled: true
  
  # 리소스 할당
  resources:
    requests:
      cpu: 1000m
      memory: 4Gi
  
  # 데이터 보관 설정
  retention: 1y
  retentionSize: 10GB
  
  # 스크랩 간격
  scrapeInterval: 1m
  evaluationInterval: 1m
  
  # 저장소 설정
  persistence:
    enabled: true
    storageClass: "gp2"
    size: "50Gi"
  
  # 스크랩 설정 (trh-sdk에서 동적으로 override)
  scrapeConfigs:
    # OP Stack 핵심 컴포넌트들
    - job_name: op-node
      static_configs:
        - targets:
            - "op-node-svc:7300"  # trh-sdk에서 실제 서비스명으로 override
      scrape_interval: "30s"
      metrics_path: "/metrics"
      
    - job_name: op-batcher
      static_configs:
        - targets:
            - "op-batcher-svc:7300"  # trh-sdk에서 실제 서비스명으로 override
      scrape_interval: "30s"
      metrics_path: "/metrics"
      
    - job_name: op-proposer
      static_configs:
        - targets:
            - "op-proposer-svc:7300"  # trh-sdk에서 실제 서비스명으로 override
      scrape_interval: "30s"
      metrics_path: "/metrics"
      
    - job_name: op-geth
      static_configs:
        - targets:
            - "op-geth-svc:6060"  # trh-sdk에서 실제 서비스명으로 override
      scrape_interval: "30s"
      metrics_path: "/debug/metrics/prometheus"
      
    # Blockscout 모니터링
    - job_name: blockscout
      static_configs:
        - targets:
            - "blockscout-svc:3000"  # trh-sdk에서 실제 서비스명으로 override
      scrape_interval: "1m"
      metrics_path: "/metrics"
      
    # Blackbox Exporter 기반 헬스체크
    - job_name: blackbox-eth-node-synced
      metrics_path: /probe
      params:
        module: [http_post_eth_node_synced_2xx]
      static_configs:
        - targets:
            - "{{ .Values.global.l1RpcUrl }}"
      relabel_configs:
        - source_labels: [module]
          target_label: __param_module
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: target
        - target_label: __address__
          replacement: "{{ .Release.Name }}-blackbox-exporter:9115"
      scrape_interval: 1m
      
    - job_name: blackbox-eth-block-number
      metrics_path: /probe
      params:
        module: [http_post_eth_block_number_2xx]
      static_configs:
        - targets:
            - "{{ .Values.global.l1RpcUrl }}"
      relabel_configs:
        - source_labels: [module]
          target_label: __param_module
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: target
        - target_label: __address__
          replacement: "{{ .Release.Name }}-blackbox-exporter:9115"
      scrape_interval: 1m

# Grafana 설정
grafana:
  enabled: true
  
  # 관리자 설정 (trh-sdk에서 동적으로 override)
  adminUser: admin
  adminPassword: "change-me-password"  # trh-sdk에서 실제 패스워드로 override
  
  # 리소스 할당
  resources:
    requests:
      cpu: 1000m
      memory: 4Gi
  
  # 영속성 설정
  persistence:
    enabled: true
    size: "10Gi"
    storageClass: "gp2"
  
  # 서비스 설정
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
  
  # Ingress 설정 (ALB)
  ingress:
    enabled: true
    className: alb
    annotations:
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
      alb.ingress.kubernetes.io/group.name: thanos-monitoring
      alb.ingress.kubernetes.io/healthcheck-path: /api/health
    hosts:
      - host: grafana-thanos.yourdomain.com
        paths:
          - path: /
            pathType: Prefix
  
  # 데이터소스 설정
  datasources:
    - name: Prometheus
      type: prometheus
      url: "http://{{ .Release.Name }}-prometheus:9090"
      access: proxy
      isDefault: true
  
  # 대시보드 자동 로딩 설정
  dashboards:
    enabled: "{{ .Values.global.dashboards.autoImport }}"

# Blackbox Exporter 설정
blackboxExporter:
  enabled: true
  
  # 서비스 설정
  service:
    type: ClusterIP
    port: 9115