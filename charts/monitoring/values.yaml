# Thanos Stack Monitoring Chart - Simplified Values
# Based on Legacy structure optimization (trh-sdk Integration)

# Global settings
global:
  # L1 RPC URL (will be set by Rollup Hub SDK)
  l1RpcUrl: ""

# Chart behavior settings  
createNamespace: true
nameOverride: ""
fullnameOverride: ""

# Service account settings
serviceAccount:
  create: true
  name: ""
  
# Thanos Stack specific configuration (set by trh-sdk)
thanosStack:
  # Chain name (will be set by Rollup Hub SDK)
  chainName: ""
  # Namespace where Thanos Stack is deployed (will be set by trh-sdk)
  namespace: ""
  # Thanos Stack chart release name (will be set by trh-sdk)
  releaseName: ""

# ============================================================================
# kube-prometheus-stack subchart configuration
# ============================================================================
kube-prometheus-stack:
  # Prometheus configuration (based on Legacy structure)
  prometheus:
    prometheusSpec:
      # Resource allocation (optimized for Thanos Stack)
      resources:
        requests:
          cpu: 1500m      # From Legacy config
          memory: 3Gi  # From Legacy config
        
      # Data retention settings
      retention: 1y
      retentionSize: 10GB
      
      # Scrape configuration
      scrapeInterval: 1m
      evaluationInterval: 1m
      
      # Storage configuration (will be enabled by trh-sdk if EFS available)
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: "efs-sc"
            accessModes: ["ReadWriteMany"]
            resources:
              requests:
                storage: "50Gi"
      
      # Thanos Stack scrape targets (trh-sdk format)
      additionalScrapeConfigs: []
      # Will be populated by trh-sdk with format:
      # - job_name: op-node
      #   static_configs:
      #     - targets:
      #         - "{release-name}-thanos-stack-op-node:7300"
      #   metrics_path: "/metrics"
      #   scrape_interval: "30s"

  # Grafana configuration
  grafana:
    enabled: true
    
    # Admin credentials (will be set by trh-sdk)
    adminUser: admin
    adminPassword: ""  # Will be set by user input
    
    # Resource allocation
    resources:
      requests:
        cpu: 1500m
        memory: 4Gi
    
    # Persistence (will be enabled by trh-sdk if EFS available)
    persistence:
      enabled: false  # Will be set by trh-sdk based on EFS availability
      storageClassName: "efs-sc"
      size: "10Gi"
      accessModes:
        - ReadWriteMany
    
    # Ingress for ALB
    ingress:
      enabled: true
      ingressClassName: alb
      annotations:
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/target-type: ip
        alb.ingress.kubernetes.io/group.name: thanos-monitoring
        
    # Dashboard providers
    sidecar:
      dashboards:
        enabled: true
        label: grafana_dashboard
        labelValue: "1"
        searchNamespace: ALL

  # Alertmanager (optional)
  alertmanager:
    enabled: false
  
  # Additional exporters
  nodeExporter:
    enabled: true
  
  kubeStateMetrics:
    enabled: true

# ============================================================================
# prometheus-blackbox-exporter subchart configuration  
# ============================================================================
prometheus-blackbox-exporter:
  enabled: true
  
  # Blackbox Exporter configuration (optimized for trh-sdk)
  config:
    modules:
      # RPC sync status check (for L1 RPC)
      http_post_eth_node_synced_2xx:
        prober: http
        http:
          method: "POST"
          headers:
            Content-Type: application/json
          body: '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}'
          valid_status_codes: [200]
          fail_if_body_not_matches_regexp:
            - "false"
      # Block number check (for L1 RPC)
      http_post_eth_block_number_2xx:
        prober: http
        http:
          method: "POST"
          headers:
            Content-Type: application/json
          body: '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":83}'
          valid_status_codes: [200]
          fail_if_body_not_matches_regexp:
            - "0x"
      # TCP connectivity check (general purpose)
      tcp_connect:
        prober: tcp
  
  # Resource allocation
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 256Mi
  
  # Service configuration
  service:
    type: ClusterIP
    port: 9115
  
  # ServiceMonitor for Prometheus discovery
  serviceMonitor:
    enabled: true
    defaults:
      labels:
        app: blackbox-exporter
      interval: 30s
      scrapeTimeout: 30s

# ============================================================================
# Chart-specific configurations (for templating and trh-sdk integration)
# ============================================================================

# Prometheus configuration (for templating)
prometheus:
  enabled: true
  
  # Thanos Stack specific scrape targets (template for trh-sdk)
  scrapeTargets:
    opNode:
      enabled: true
      port: 7300
      path: "/metrics"
      interval: "30s"
      # Service name will be: {thanosStack.releaseName}-thanos-stack-op-node
    opBatcher:
      enabled: true
      port: 7300
      path: "/metrics"
      interval: "30s"
      # Service name will be: {thanosStack.releaseName}-thanos-stack-op-batcher
    opProposer:
      enabled: true
      port: 7300
      path: "/metrics"
      interval: "30s"
      # Service name will be: {thanosStack.releaseName}-thanos-stack-op-proposer
    opGeth:
      enabled: true
      port: 6060
      path: "/debug/metrics/prometheus"
      interval: "30s"
      # Service name will be: {thanosStack.releaseName}-thanos-stack-op-geth
    blockscout:
      enabled: true
      port: 3000
      path: "/metrics"
      interval: "1m"
      # Service name will be: {thanosStack.releaseName}-thanos-stack-blockscout

# Grafana configuration (for templating)
grafana:
  enabled: true
  
  # Admin credentials (will be set by trh-sdk)
  adminUser: admin
  adminPassword: ""  # Will be set by user input
  
  # Note: Dashboards are now managed via files in dashboards/ directory
  # They are automatically imported via Grafana sidecar when labeled with grafana_dashboard: "1"

# Blackbox Exporter configuration (for templating)
blackboxExporter:
  enabled: true
  
  # Health check targets (trh-sdk will set these)
  targets:
    l1Rpc:
      enabled: true
      # URL will be set from global.l1RpcUrl
    # Removed: proxyd, graph-node, redis as per requirements

# Alert rules configuration
alerting:
  enabled: false
  # Thanos Stack specific alerts
  thanosStackAlerts:
    enabled: true
  # System alerts
  systemAlerts:
    enabled: true

# Service monitoring configuration (trh-sdk managed)
serviceMonitoring:
  # Enable automatic service discovery in Thanos namespace
  autoDiscovery:
    enabled: true
    # Namespaces will be set by trh-sdk (thanosStack.namespace)
    namespaces: []
  
  # Service endpoints (will be populated by trh-sdk)
  endpoints:
    opNode: ""       # Will be set to: {thanosStack.releaseName}-thanos-stack-op-node:7300
    opBatcher: ""    # Will be set to: {thanosStack.releaseName}-thanos-stack-op-batcher:7300
    opProposer: ""   # Will be set to: {thanosStack.releaseName}-thanos-stack-op-proposer:7300
    opGeth: ""       # Will be set to: {thanosStack.releaseName}-thanos-stack-op-geth:6060
    blockscout: ""   # Will be set to: {thanosStack.releaseName}-thanos-stack-blockscout:3000

# Legacy compatibility settings (deprecated with trh-sdk)
legacy:
  enabled: false
  # Legacy service names are no longer used with trh-sdk integration

# Advanced configuration
advanced:
  # EFS configuration (set by trh-sdk)
  efs:
    enabled: false
    fileSystemId: ""
  
  # Additional scrape configs (can be extended by trh-sdk)
  additionalScrapeConfigs: []
  
  # Custom dashboards (can be added by trh-sdk)
  customDashboards: []

