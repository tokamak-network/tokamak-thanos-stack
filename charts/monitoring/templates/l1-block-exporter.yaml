{{- if .Values.l1BlockExporter.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-l1-block-exporter-script
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: l1-block-exporter
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  exporter.py: |
    #!/usr/bin/env python3
    import json
    import requests
    import time
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import os
    import threading
    
    class MetricsHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/metrics':
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                
                try:
                    l1_rpc_url = os.environ.get('L1_RPC_URL', 'http://localhost:8545')
                    
                    # Get latest block number
                    payload = {
                        "jsonrpc": "2.0",
                        "method": "eth_blockNumber",
                        "params": [],
                        "id": 1
                    }
                    
                    response = requests.post(l1_rpc_url, json=payload, timeout=10)
                    
                    if response.status_code == 200:
                        result = response.json()
                        if 'result' in result:
                            # Convert hex to decimal
                            block_number = int(result['result'], 16)
                            
                            metrics = "# HELP l1_block_number Current L1 block number\n"
                            metrics += "# TYPE l1_block_number gauge\n"
                            metrics += f"l1_block_number {block_number}\n\n"
                            metrics += "# HELP l1_rpc_up L1 RPC endpoint availability\n"
                            metrics += "# TYPE l1_rpc_up gauge\n"
                            metrics += "l1_rpc_up 1\n"
                        else:
                            metrics = "# HELP l1_rpc_up L1 RPC endpoint availability\n"
                            metrics += "# TYPE l1_rpc_up gauge\n"
                            metrics += "l1_rpc_up 0\n"
                    else:
                        metrics = "# HELP l1_rpc_up L1 RPC endpoint availability\n"
                        metrics += "# TYPE l1_rpc_up gauge\n"
                        metrics += "l1_rpc_up 0\n"
                        
                except Exception as e:
                    print(f"Error fetching L1 block: {e}")
                    metrics = "# HELP l1_rpc_up L1 RPC endpoint availability\n"
                    metrics += "# TYPE l1_rpc_up gauge\n"
                    metrics += "l1_rpc_up 0\n"
                
                self.wfile.write(metrics.encode())
            else:
                self.send_response(404)
                self.end_headers()
    
    if __name__ == '__main__':
        server = HTTPServer(('0.0.0.0', 8080), MetricsHandler)
        print("L1 Block Exporter started on port 8080")
        server.serve_forever()

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-l1-block-exporter
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: l1-block-exporter
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: l1-block-exporter
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: l1-block-exporter
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: l1-block-exporter
          image: python:3.9-slim
          command: ["sh", "-c", "pip install requests && python3 /app/exporter.py"]
          env:
            - name: L1_RPC_URL
              value: "{{ .Values.global.l1RpcUrl }}"
          ports:
            - containerPort: 8080
              name: metrics
          volumeMounts:
            - name: script
              mountPath: /app
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 100m
              memory: 128Mi
      volumes:
        - name: script
          configMap:
            name: {{ .Release.Name }}-l1-block-exporter-script
            defaultMode: 0755

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-l1-block-exporter
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: l1-block-exporter
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: metrics
  selector:
    app.kubernetes.io/name: l1-block-exporter
    app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }} 