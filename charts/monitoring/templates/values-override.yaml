# Values override for dynamic configuration based on global settings
# This ConfigMap contains the computed values for the monitoring stack

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "monitoring.fullname" . }}-values-override
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "monitoring.labels" . | nindent 4 }}
data:
  # Storage configuration
  storage-enabled: {{ .Values.global.storage.enabled | quote }}
  {{- if .Values.global.storage.efsFileSystemId }}
  efs-file-system-id: {{ .Values.global.storage.efsFileSystemId | quote }}
  {{- end }}
  {{- if .Values.global.storage.awsRegion }}
  aws-region: {{ .Values.global.storage.awsRegion | quote }}
  {{- end }}
  
  {{- if and .Values.global.storage.enabled .Values.global.storage.efsFileSystemId }}
  # EFS direct mount information
  efs-enabled: "true"
  storage-info: |
    EFS Direct Mount Configuration:
    - Method: Direct NFS mount (no CSI driver required)
    - Access Mode: ReadWriteMany
    {{- if .Values.global.storage.efsFileSystemId }}
    - File System ID: {{ .Values.global.storage.efsFileSystemId }}
    - NFS Server: {{ .Values.global.storage.efsFileSystemId }}.efs.{{ .Values.global.storage.awsRegion }}.amazonaws.com
    {{- end }}
    - Fargate Compatible: Yes
  {{- end }}
  
  # Computed values for subchart configuration
  values-override.yaml: |
    # kube-prometheus-stack configuration
    kube-prometheus-stack:
      prometheus:
        prometheusSpec:
          {{- if and .Values.global.storage.enabled .Values.global.storage.useStaticProvisioning }}
          # Static provisioning with PVC
          storageSpec:
            volumeClaimTemplate:
              spec:
                storageClassName: monitoring-efs-sc
                accessModes: ["ReadWriteMany"]
                resources:
                  requests:
                    storage: 20Gi
                selector:
                  matchLabels:
                    app: prometheus
                    monitoring-stack: {{ .Values.thanosStack.chainName }}
                    component: monitoring
          {{- else if and .Values.global.storage.enabled .Values.global.storage.efsFileSystemId .Values.global.storage.awsRegion }}
          # EFS direct mount configuration (fallback)
          extraVolumes:
            - name: prometheus-efs-storage
              nfs:
                server: {{ .Values.global.storage.efsFileSystemId }}.efs.{{ .Values.global.storage.awsRegion }}.amazonaws.com
                path: /prometheus
          extraVolumeMounts:
            - name: prometheus-efs-storage
              mountPath: /prometheus-efs
              subPath: ""
          {{- end }}
          
          # Apply global security context
          securityContext:
            {{- toYaml .Values.global.securityContext | nindent 12 }}
          
          podSecurityContext:
            {{- toYaml .Values.global.podSecurityContext | nindent 12 }}
            
      # Grafana configuration
      grafana:
        {{- if and .Values.global.storage.enabled .Values.global.storage.useStaticProvisioning }}
        # Static provisioning with PVC
        persistence:
          enabled: true
          storageClassName: monitoring-efs-sc
          accessModes: ["ReadWriteMany"]
          size: 10Gi
          selector:
            matchLabels:
              app: grafana
              monitoring-stack: {{ .Values.thanosStack.chainName }}
              component: monitoring
        {{- else if and .Values.global.storage.enabled .Values.global.storage.efsFileSystemId .Values.global.storage.awsRegion }}
        # EFS direct mount configuration (fallback)
        extraVolumes:
          - name: grafana-efs-storage
            nfs:
              server: {{ .Values.global.storage.efsFileSystemId }}.efs.{{ .Values.global.storage.awsRegion }}.amazonaws.com
              path: /grafana
        extraVolumeMounts:
          - name: grafana-efs-storage
            mountPath: /var/lib/grafana-efs
            subPath: ""
        # Disable default persistence since we're using direct mount
        persistence:
          enabled: false
        {{- else }}
        persistence:
          enabled: false  # Use emptyDir volumes
        {{- end }}
        
        # Apply global security context
        securityContext:
          {{- toYaml .Values.global.securityContext | nindent 10 }}
        
        podSecurityContext:
          {{- toYaml .Values.global.podSecurityContext | nindent 10 }}
          
      # Disable NodeExporter for Fargate compatibility
      nodeExporter:
        enabled: false

{{- if and .Values.thanosStack.releaseName .Values.thanosStack.namespace }}
---
# ConfigMap for Prometheus additional scrape configuration
# This is dynamically generated based on values.yaml scrapeTargets and global settings
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "monitoring.fullname" . }}-scrape-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "monitoring.labels" . | nindent 4 }}
data:
  # Additional scrape configs for Prometheus
  additional-scrape-configs.yaml: |
    {{- range $name, $config := .Values.scrapeTargets }}
    {{- if $config.enabled }}
    - job_name: {{ $name }}
      static_configs:
        - targets:
            - "{{ $.Values.thanosStack.releaseName }}-{{ $name }}:{{ $config.port }}"
      metrics_path: {{ $config.path }}
      scrape_interval: {{ $config.interval }}
    {{- end }}
    {{- end }}
    
    {{- if .Values.global.l1RpcUrl }}
    # Blackbox exporter health checks for L1 RPC
    - job_name: blackbox-eth-node-synced
      metrics_path: /probe
      params:
        module: [http_post_eth_node_synced_2xx]
      static_configs:
        - targets:
            - {{ .Values.global.l1RpcUrl | quote }}
      relabel_configs:
        - source_labels: [module]
          target_label: __param_module
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: target
        - target_label: __address__
          replacement: "{{ include "monitoring.fullname" . }}-prometheus-blackbox-exporter:9115"
          
    - job_name: blackbox-eth-block-number
      metrics_path: /probe
      params:
        module: [http_post_eth_block_number_2xx]
      static_configs:
        - targets:
            - {{ .Values.global.l1RpcUrl | quote }}
      relabel_configs:
        - source_labels: [module]
          target_label: __param_module
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: target
        - target_label: __address__
          replacement: "{{ include "monitoring.fullname" . }}-prometheus-blackbox-exporter:9115"
    {{- end }}
    
    # Custom additional scrape configurations (if any)
    {{- range .Values.additionalScrapeConfigs }}
    {{ . | toYaml | nindent 4 }}
    {{- end }}

{{- end }} 