apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "thanos-stack.fullname" . }}-op-geth-alb
  annotations:
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
    alb.ingress.kubernetes.io/group.name: op-geth
    alb.ingress.kubernetes.io/conditions.ws-rule: >
      [
        {
          "field": "http-header",
          "httpHeaderConfig": {
              "httpHeaderName": "Upgrade",
              "values": ["websocket"]
          }
        },
        {
          "field": "http-header",
          "httpHeaderConfig": {
            "httpHeaderName": "Connection",
            "values": ["Upgrade"]
          }
        }
      ]
    alb.ingress.kubernetes.io/actions.ws-rule: >
      {
        "type": "forward",
        "forwardConfig": {
          "targetGroups": [{
            "serviceName": "{{ include "thanos-stack.fullname" . }}-op-geth",
            "servicePort": "8546"
          }]
        }
      }
spec:
  ingressClassName: alb
  tls:
    - hosts:
        - {{ .Values.op_geth.service.domain }}
  rules:
    - host: {{ .Values.op_geth.service.domain }}
      http:
        paths:
          - path: /
            pathType: Exact
            backend:
              service:
                name: ws-rule
                port:
                  name: use-annotation
          - path: /
            pathType: Exact
            backend:
              service: 
                name: {{ include "thanos-stack.fullname" . }}-op-geth 
                port:
                  number: 8545
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "thanos-stack.fullname" . }}-op-geth-alb-bad-request
  annotations:
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/group.name: op-geth
    alb.ingress.kubernetes.io/actions.http-badrequest: >
      {
        "type": "fixed-response",
        "fixedResponseConfig": {
          "contentType": "application/json",
          "statusCode": "400",
          "messageBody": "{\"jsonrpc\": \"2.0\",\"error\": {\"code\": -32600,\"message\": \"HTTPS is required\"}}"
        }
      }
spec:
  ingressClassName: alb
  rules:
    - host: {{ .Values.op_geth.service.domain }}
      http:
        paths:
          - path: /
            pathType: Exact
            backend:
              service:
                name: http-badrequest
                port:
                  name: use-annotation
